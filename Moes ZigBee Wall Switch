import hubitat.device.HubAction
import hubitat.device.Protocol

metadata {
    definition (name: "Moes ZigBee Wall Switch 1/2/3-Gang", namespace: "Moes 1.27-beta", author: "Martin Kura") {
        capability "Initialize"
        capability "Actuator"
//         capability "Configuration"
        capability "Refresh"
        capability "Switch"
        capability "Health Check"
        
        fingerprint profileId:"0104", model:"TS0601", manufacturer:"_TZE200_amp6tsvy", endpointId:"01", inClusters:"0000,0004,0005,EF00", outClusters:"0019,000A", application:"42", deviceJoinName: "Moes 1-Gang Switch / ZTS-EU1"
		fingerprint profileId:"0104", model:"TS0601", manufacturer:"_TZE200_g1ib5ldv", endpointId:"01", inClusters:"0000,0004,0005,EF00", outClusters:"0019,000A", application:"42", deviceJoinName: "Moes 2-Gang Switch / ZTS-EU2"
        fingerprint profileId:"0104", model:"TS0601", manufacturer:"_TZE200_tz32mtza", endpointId:"01", inClusters:"0000,0004,0005,EF00", outClusters:"0019,000A", application:"42", deviceJoinName: "Moes 3-Gang Switch / ZTS-EU3"
    }
	    attribute "switch","enum",["on","off"]
        attribute "switchLightMode","enum",["OFF", "ON", "Position"]
        attribute "relayMode","enum",["OFF", "ON", "Last state"]
        attribute "lastCheckin", "string"

    preferences {
        input(name: "switchLightMode", type: "enum", title: ("Switch Backlight Mode"), description: ("- select type of backlight indicator (default: Position)"), options: ["OFF", "ON", "Position"], defaultValue: "Position", submitOnChange: true)
		input(name: "relayMode", type: "enum", title: ("Switch Relay Mode"), description: ("- select relay renew state after AC failed (default: OFF)"), options: ["OFF", "ON", "Last state"], defaultValue: "OFF", submitOnChange: true)
        input(name: "debugLogging", type: "bool", title: ("Enable debug logging"), description: "", defaultValue: false, submitOnChange: true, displayDuringSetup: false, required: false)
        input(name: "infoLogging", type: "bool", title: ("Enable info logging"), description: "", defaultValue: true, submitOnChange: true, displayDuringSetup: false, required: false)
    	}
}

def initialize() {
    if (infoLogging) log.info "Initializing..."
    setupChildDevices()
    device.updateSetting("switchLightMode",[type:"enum",value:"Position"])
    device.updateSetting("relayMode",[type:"enum",value:"OFF"])
    device.updateSetting("debugLogging",[type:"bool",value:"false"])
    refresh()
}

/*def configure(){
     if (debugLogging) log.debug "Configuring Reporting and Bindings..."
    switchLightModeConfig() + relayModeConfig()
   
    def cmds = [
            //bindings
            "zdo bind 0x${device.deviceNetworkId} 0x${device.endpointId} 0x01 0x0006 {${device.zigbeeId}} {}", "delay 200",
            "zdo bind 0x${device.deviceNetworkId} 0x${device.endpointId} 0x01 0x0008 {${device.zigbeeId}} {}", "delay 200",
            "zdo bind 0x${device.deviceNetworkId} 0x${device.endpointId} 0x01 0x0300 {${device.zigbeeId}} {}", "delay 200",
            //reporting
            "he cr 0x${device.deviceNetworkId} 0x${device.endpointId} 0x0006 0 0x10 0 0xFFFF {}","delay 200",
            "he cr 0x${device.deviceNetworkId} 0x${device.endpointId} 0x0008 0 0x20 0 0xFFFF {}", "delay 200",
            "he cr 0x${device.deviceNetworkId} 0x${device.endpointId} 0x0300 0 0x0000 0 0xFFFF {}", "delay 200",
            "he cr 0x${device.deviceNetworkId} 0x${device.endpointId} 0x0300 0 0x0001 0 0xFFFF {}", "delay 200",
            "he cr 0x${device.deviceNetworkId} 0x${device.endpointId} 0x0300 0 0x0007 0 0xFFFF {}", "delay 200",
            "he cr 0x${device.deviceNetworkId} 0x${device.endpointId} 0x0300 0 0x0008 1 0xFFFE {}", "delay 200",
    ] + refresh()
    return cmds
    
}      */

def installed() {
    if (debugLogging) log.debug "Parent installed"
}

def updated() {
    log.warn "debug logging is: ${debugLogging == true}"
    log.warn "description logging is: ${infoLogging == true}"
    if (infoLogging) log.info "Updated..."
//    if (debugLogging) runIn(1800,logsOff)
    if (debugLogging) log.debug "Parent updated"
    switchLightModeConfig() + relayModeConfig()
}

// Parse incoming device messages to generate events
def parse(String description) {
    if (debugLogging) log.debug "///parse code/// - ${description}"
    if (description.startsWith("catchall")) return                    // not something we can handle
    def descMap = zigbee.parseDescriptionAsMap(description)
    if (debugLogging) log.debug "parse - DescMap: ${descMap}"
    // ... normal packet
    	if (descMap.cluster == "EF00" && descMap.command =="01") {
// descMap.command =="0A" - switch toggled physically
// descMap.command =="01" - get switch status
def cd = getChildDevice(${childDevice.deviceNetworkId})
if (cd == null) {
log.warn "Child device ${childDevice.deviceNetworkId} not found. Initialise parent device first"
return
}
def switchAttribute = descMap.data == "${fullDataOn}" ? "on" : "off"
if (descMap.command =="01") {
// switch toggled
cd.parse([[name: "switch", value:switchAttribute, descriptionText: "Child switch ${childDevice.deviceNetworkId} turned $switchAttribute"]])
} else if (descMap.command =="01") {
// report switch status
cd.parse([[name: "switch", value:switchAttribute, descriptionText: "Child switch ${childDevice.deviceNetworkId} is $switchAttribute"]])
}

   if (switchAttribute == "on") {
       if (debugLogging) log.debug "Parent switch on"
       return createEvent(name: "switch", value: "on")
   } else if (switchAttribute == "off") {
        def cdsOn = 0
        // cound number of switches on
        getChildDevices().each {child ->
            if (getChildId(child) != descMap.endpoint && child.currentValue('switch') == "on") {
                cdsOn++
            }
        }
        if (cdsOn == 0) {
            if (debugLogging) log.debug "Parent switch off"
            return createEvent(name: "switch", value: "off")
        }
     }
  }
}

def lastCheckin() {    
    def now = new Date() //  send event for heartbeat
    sendEvent(name: "lastCheckin", value: now)
        }

def off() {
    if (infoLogging) log.info "Turn all switches OFF"	
     return  [
    "he cmd 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00 {0001010100010002010001000301000100}","delay 200",
    //"he rattr 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x01 {}","delay 200"
         ]
}

def on() {
    if (infoLogging) log.info "Turn all switches ON"
    return  [
    "he cmd 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00 {0001010100010102010001010301000101}","delay 200",
   // "he rattr 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x01 {}","delay 200"
          ]
}

def refresh() {
	if (debugLogging) log.debug "Refreshing..."
    //"he rattr 0x${device.deviceNetworkId} 0x01 0xEF00 0x01"
    return  [
    "he rattr 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x01 {}","delay 200",  //light state
    lastCheckin()
    ]    
}

private Integer convertHexToInt(hex) {
	Integer.parseInt(hex,16)
}

private String getChildId(childDevice) {
    return childDevice.deviceNetworkId.substring(childDevice.deviceNetworkId.length() - 2)
}

def componentOn(childDevice) {
    if (debugLogging) log.debug "component is ON - ${childDevice} {${childDevice.deviceNetworkId}}"
    if (infoLogging) log.info "${childDevice} {${childDevice.deviceNetworkId}} state is ON"
    String fullDataOn = "0001" + getChildId(childDevice) + "01000101"
    sendHubCommand(new HubAction("he cmd 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00 {${fullDataOn}}", Protocol.ZIGBEE))
    if (debugLogging) log.debug "{executed} 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00 {${fullDataOn}}"
    }

def componentOff(childDevice) {
    if (debugLogging) log.debug "component is OFF - ${childDevice} {${childDevice.deviceNetworkId}}"
    if (infoLogging) log.info "${childDevice} {${childDevice.deviceNetworkId}} state is OFF"
    String fullDataOff = "0001" + getChildId(childDevice) + "01000100"
    sendHubCommand(new HubAction("he cmd 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00 {${fullDataOff}}", Protocol.ZIGBEE))
    if (debugLogging) log.debug "{executed} 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00 {${fullDataOff}}"
    }

def componentRefresh(childDevice) {
    if (debugLogging) log.debug "component refresh ${childDevice.deviceNetworkId} ${childDevice}"    
    sendHubCommand(new HubAction("he rattr 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00", Protocol.ZIGBEE))
    if (debugLogging) log.debug "{executed} 0x${device.deviceNetworkId} 0x${device.endpointId} 0xEF00 0x00"
}

def setupChildDevices() {
    if (debugLogging) log.debug "Parent setupChildDevices"
    deleteObsoleteChildren() 
    def buttons = 0
    switch (device.data.manufacturer) {
        case '_TZE200_amp6tsvy':
            buttons = 1
        break
        case '_TZE200_g1ib5ldv':
            buttons = 2
        break
	case '_TZE200_tz32mtza':
            buttons = 3
        break
    }
    if (infoLogging) log.info  "model: ${device.data.manufacturer}   buttons: $buttons"
    createChildDevices((int)buttons)
}

def createChildDevices(int buttons) {
    if (debugLogging) log.debug "Parent createChildDevices"
    
    if (buttons <= 1)
        return 
        
    for (i in 1..buttons) {
        def childId = "${device.id}-0${i}"
        def existingChild = getChildDevices()?.find { it.deviceNetworkId == childId}
    
        if (existingChild) {
            if (infoLogging) log.info "Child device ${childId} already exists (${existingChild})"
        } else {
            if (infoLogging) log.info "Creating device ${childId}"
            addChildDevice("hubitat", "Generic Component Switch", childId, [isComponent: true, name: "Switch EP0${i}", label: "${device.displayName} EP0${i}"])
        }
    }
}

def deleteObsoleteChildren() {
	if (debugLogging) log.debug "Parent deleteChildren"
    
    getChildDevices().each {child->
        if (!child.deviceNetworkId.startsWith(device.id) || child.deviceNetworkId == "${device.id}-00") {
            if (infoLogging) log.info "Deleting ${child.deviceNetworkId}"
  		    deleteChildDevice(child.deviceNetworkId)
        }
    }
}

def switchLightModeConfig(){
def cmds = []
     switch(switchLightMode) {
        case "OFF":
         if (infoLogging) log.info "Backlight - OFF"
		 zigbee.command(0xEF00, 0x0, "00010f04000100")
        break
        case "ON":
         if (infoLogging) log.info "Backlight - ON"
		 zigbee.command(0xEF00, 0x0, "00010f04000101")
        break
        case "Position":
         if (infoLogging) log.info "Backlight - position"
		 zigbee.command(0xEF00, 0x0, "00010f04000102")
        break
         }
    } 

def relayModeConfig(){
def cmds = []
	switch(relayMode) {
        case "OFF":
         if (infoLogging) log.info "Relay state - OFF"
     	 zigbee.command(0xEF00, 0x0, "00010e04000100")
        break
        case "ON":
         if (infoLogging) log.info "Relay state - ON"
 	 	 zigbee.command(0xEF00, 0x0, "00010e04000101")
        break
        case "Last state":
         if (infoLogging) log.info "Relay state - last state"
 	 	 zigbee.command(0xEF00, 0x0, "00010e04000102")
        break
        }
    }

private Map parseCatchAllMessage(String description) {
    // Create a map from the raw zigbee message to make parsing more intuitive
    def msg = zigbee.parse(description)
    Map result = [:]
    switch(msg.clusterId) {
        case 0xEF00: 
            def attribute = getAttribute(msg.data)
            def value = getAttributeValue(msg.data)
            
            switch (attribute) {
                case "switch": 
                    switch(value) {
                        case 0:
                            result = [
                                name: 'switch',
                                value: 'off',
                                data: [buttonNumber: 1],
                                descriptionText: "$device.displayName button was pressed",
                                isStateChange: true
                            ]
                        break;

                        case 1:
                            result = [
                                name: 'switch',
                                value: 'on',
                                data: [buttonNumber: 1],
                                descriptionText: "$device.displayName button was pressed",
                                isStateChange: true
                            ]
                        break;
                    }
                
                break;
                
           }
        
        break;
    }
    
    return result
}
private String getAttribute(ArrayList _data) {
    String retValue = ""
    if (_data.size() >= 5) {
        if (_data[2] == 1 && _data[3] == 1 && _data[4] == 0) {
            retValue = "switch"
        }
        else if (_data[2] == 2 && _data[3] == 2 && _data[4] == 0) {
            retValue = "level"
        }
    }
    
    return retValue
}

private int getAttributeValue(ArrayList _data) {
    int retValue = 0
    
    if (_data.size() >= 6) {
        int dataLength = _data[5] as Integer
        int power = 1;
        for (i in dataLength..1) {
            retValue = retValue + power * _data[i+5]
            power = power * 256
        }
    }
    
    return retValue
}
